<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "User_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-fwbackups-User_Guide-Technical_Information">
	<title>Technical Information</title>
	 <section id="sect-fwbackups-User_Guide-Technical_Information-Backup_formats">
		<title>Backup formats</title>
		 <para>
			This section details how fwbackups create backups and each type of backup's storage requirements.
		</para>
		 <section id="sect-fwbackups-User_Guide-Backup_formats-Archivetar_backups">
			<title>Archive/tar backups</title>
			 <para>
				<guilabel>Archive</guilabel> backups use one of two methods to create the backup archive depending on the operating system. On Unix-like operating systems such as Linux, Unix and OS X, the <command>tar</command> executable is called upon directly to create a standard GNU tar archive, optionally with gzip or bzip2 compression. On Windows, Python's <ulink url="http://docs.python.org/library/tarfile.html">tarfile</ulink> module is used to create a standard GNU compliant tar archive. In either case, backup compression is applied on-the-fly without the need for the tar archive to be created first.
			</para>
			 <para>
				Because the backup is in the format of a standard tar archive, should fwbackups ever fail to restore a backup any utility supporting the tar format such as GNOME's integrated <ulink url="http://library.gnome.org/users/file-roller/stable/">file-roller</ulink> utility or <ulink url="http://www.7-zip.org/">7-zip</ulink> on Windows may be used to extract files from the backup. For those confortable with the command line, a simple <command>tar xfz &lt;backup file&gt;</command> will extract all files from the backup.
			</para>

		</section>
		 <section id="sect-fwbackups-User_Guide-Backup_formats-Direct_Copyrsync_backups">
			<title>Direct Copy/rsync backups</title>
			 <para>
				As with <guilabel>Archive</guilabel> backups, <guilabel>Direct copy</guilabel> backups will use one of two methods to copy files depending on the operatng system. On Windows, fwbackups uses a slightly modified version of the Python <ulink url="http://docs.python.org/library/shutil.html">shutil</ulink> library to copy files and folders. On Unix-like operating systems (Linux, Unix and OS X) fwbackups determines the appropriate parameters and then makes a call to <command>rsync</command> to copy the files (rsync is faster than shutil and therefore is used when the OS supports it). Thus, in either case the result is a direct copy of the files and folder structure.
			</para>
			 <para>
				Because files have been copied directly, if fwbackups fails to restore your files simply copying them from the backup destination to their desired location via drag-and-drop in your file browser will suffice.
			</para>

		</section>
		 <section id="sect-fwbackups-User_Guide-Backup_formats-Minimum_storage_requirements">
			<title>Minimum storage requirements</title>
			 <para>
				Depending on your backup format and destination, the minimum storage requirements to complete a backup may change.
			</para>
			 <para>
				For local backups, both the <guilabel>Archive</guilabel> and <guilabel>Direct copy</guilabel> backup engines will copy files from the disk source to the destination without the need for temporary storage, even if compression is enabled. Therefore, you should have no problems backing up a full disk so long as your destination is on another volume such as USB or removable storage.
			</para>
			 <para>
				Backups to remote destinations have different storage requirements. <guilabel>Archive</guilabel> backups with a remote destination create the archive locally and then upload it via SFTP to the remote host. Therefore, you must have free space equal to the size of the files being backed up (unless compression is enabled, in which case slightly less would be required). In a <guilabel>Direct copy</guilabel> backup with a remote destination, files are uploaded directly to the remote machine and therefore it is possible to backup a full drive. However, be warned that a remote direct copy is significantly slower than a archive backup.
			</para>

		</section>

	</section>
	 <section id="sect-fwbackups-User_Guide-Technical_Information-Preservation_of_file_ownership_and_other_attributes">
		<title>Preservation of file ownership and other attributes</title>
		 <para>
			fwbackups uses the internal Python <ulink url="http://docs.python.org/library/tarfile.html">tarfile</ulink> and <ulink url="http://docs.python.org/library/shutil.html">shutil</ulink> modules to restore files (and <ulink url="http://www.lag.net/paramiko/">paramiko</ulink> for interfacing with remote hosts via SFTP). File permissions, modification time and access time are always preserved, as are symbolic links.
		</para>
		 <para>
			Local backups should preserve ownership on Unix-like operating systems, however OSs commonly do not allow regular users to change the ownership of files and thus the backup would need to be extracted manually as root in order to preserve ownership. Remote backups will not preserve ownership, as any files uploaded over SFTP assume the owner of the user used to connect to the remote machine. Please note that in the case of an archive backup to a remote host, this only applies to the actual archive file. The archive itself may contain file ownership information and once it has been retrieved from the remote host, it can be extracted manually similarly to a local archive backup if the user wishes to preserve file ownership.
		</para>
		 <para>
			Other file attributes, xattrs or ACLs may be stored in the backup (depending on the backup format, the OS the backup was created on and filesystem) however fwbackups will not attempt to restore them.
		</para>

	</section>
	 <section id="sect-fwbackups-User_Guide-Technical_Information-Expected_levels_of_reliability">
		<title>Expected levels of reliability</title>
		 <para>
			fwbackups is a user backup program and accordingly, should be able to backup your user data without issues. Although it is possible to use fwbackups to backup an entire operating system, this was not its intended purpose and this scenario is as of yet untested. Users should expect fwbackups to successfully backup and restore their data, however (as described above) extra metadata such as file ownership, ACLs and extended attributes that an OS may require to function properly are not guaranteed to be restored along with the actual file data.
		</para>
		 <para>
			Prior to each release of fwbackups, the code is put through a test suite which automates each possible type of backup and restore operation and verifies that each of those operations completed successfully. Nonetheless, unexpected bugs in software do happen and migitate the risk of unintentional data loss, users are recommended to check the fwbackups log regularly to ensure no errors are occuring, as well as periodically verify backups to ensure that no files are missing.
		</para>

	</section>

</chapter>

